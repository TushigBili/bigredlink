{"ast":null,"code":"var _jsxFileName = \"/workspaces/bigredlink/BigRedLink/frontend/src/components/Login.js\",\n  _s = $RefreshSig$();\n/**\n * Import necessary dependencies\n */\nimport React, { useState } from 'react'; // Import React library and useState hook\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate to programmatically navigate between routes\nimport BASE_URL from '../apiConfig'; // Import BASE_URL from configuration file for API endpoint reference\n\n/**\n * Login Component\n * @param {Function} onLogin - Function to handle successful login by updating parent state\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  // State for username and password\n  const [username, setUsername] = useState(''); // State variable for storing the username\n  const [password, setPassword] = useState(''); // State variable for storing the password\n  const navigate = useNavigate(); // Hook to navigate between routes in the app\n\n  /**\n   * handleLogin function - Makes a POST request to log in the user\n   */\n  const handleLogin = async () => {\n    try {\n      console.log(\"Attempting to log in...\");\n      const response = await fetch(`${BASE_URL}/users/login`, {\n        method: 'POST',\n        // HTTP method\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Set content type to JSON\n        body: JSON.stringify({\n          username,\n          password\n        }) // Pass username and password in request body\n      });\n\n      // Check if response is successful\n      if (!response.ok) {\n        console.error(\"Response error:\", response.statusText);\n        throw new Error(`HTTP status ${response.status}`);\n      }\n      const data = await response.json(); // Parse response data\n\n      // Check for errors in response data\n      if (data.error) {\n        alert('Login failed: ' + data.error); // Alert user if login fails\n      } else {\n        alert('Login successful'); // Notify user if login succeeds\n        onLogin(data.user_id, username); // Call onLogin function to update state in the parent component\n      }\n    } catch (error) {\n      console.error('Error:', error); // Log error to console\n      alert('An error occurred during login.'); // Alert user if there is an error\n    }\n  };\n\n  /**\n   * Render the login form\n   * Includes a form to input username and password, a button to log in, and another button to navigate to the registration page.\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center h-screen bg-gray-100\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"bg-white p-8 rounded-lg shadow-lg w-80 border border-gray-300\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl font-bold mb-5 text-center text-red-700\",\n        children: \"Big Red Link Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-gray-700 font-bold mb-2\",\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-red-700\",\n          value: username,\n          onChange: e => setUsername(e.target.value) // Update username state on input change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-gray-700 font-bold mb-2\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          className: \"w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-red-700\",\n          value: password,\n          onChange: e => setPassword(e.target.value) // Update password state on input change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleLogin // Call handleLogin function on button click\n        ,\n        className: \"w-full bg-red-700 text-white py-2 rounded-md hover:bg-red-800 transition mt-4\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => navigate('/register') // Navigate to register page on button click\n        ,\n        className: \"w-full bg-gray-700 text-white py-2 rounded-md hover:bg-gray-800 transition mt-4\",\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n// Export Login component\n_s(Login, \"IIPwWddbiEHHD7aoL5eQeOR7fTk=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","BASE_URL","jsxDEV","_jsxDEV","Login","onLogin","_s","username","setUsername","password","setPassword","navigate","handleLogin","console","log","response","fetch","method","headers","body","JSON","stringify","ok","error","statusText","Error","status","data","json","alert","user_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/workspaces/bigredlink/BigRedLink/frontend/src/components/Login.js"],"sourcesContent":["/**\n * Import necessary dependencies\n */\nimport React, { useState } from 'react'; // Import React library and useState hook\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate to programmatically navigate between routes\nimport BASE_URL from '../apiConfig'; // Import BASE_URL from configuration file for API endpoint reference\n\n/**\n * Login Component\n * @param {Function} onLogin - Function to handle successful login by updating parent state\n */\nconst Login = ({ onLogin }) => {\n    // State for username and password\n    const [username, setUsername] = useState(''); // State variable for storing the username\n    const [password, setPassword] = useState(''); // State variable for storing the password\n    const navigate = useNavigate(); // Hook to navigate between routes in the app\n\n    /**\n     * handleLogin function - Makes a POST request to log in the user\n     */\n    const handleLogin = async () => {\n        try {\n            console.log(\"Attempting to log in...\");\n            const response = await fetch(`${BASE_URL}/users/login`, {\n                method: 'POST', // HTTP method\n                headers: { 'Content-Type': 'application/json' }, // Set content type to JSON\n                body: JSON.stringify({ username, password }) // Pass username and password in request body\n            });\n\n            // Check if response is successful\n            if (!response.ok) {\n                console.error(\"Response error:\", response.statusText);\n                throw new Error(`HTTP status ${response.status}`);\n            }\n\n            const data = await response.json(); // Parse response data\n\n            // Check for errors in response data\n            if (data.error) {\n                alert('Login failed: ' + data.error); // Alert user if login fails\n            } else {\n                alert('Login successful'); // Notify user if login succeeds\n                onLogin(data.user_id, username); // Call onLogin function to update state in the parent component\n            }\n        } catch (error) {\n            console.error('Error:', error); // Log error to console\n            alert('An error occurred during login.'); // Alert user if there is an error\n        }\n    };\n\n    /**\n     * Render the login form\n     * Includes a form to input username and password, a button to log in, and another button to navigate to the registration page.\n     */\n    return (\n        <div className=\"flex items-center justify-center h-screen bg-gray-100\">\n            {/* Login Form */}\n            <form className=\"bg-white p-8 rounded-lg shadow-lg w-80 border border-gray-300\">\n                {/* Form Title */}\n                <h2 className=\"text-3xl font-bold mb-5 text-center text-red-700\">Big Red Link Login</h2>\n\n                {/* Username Input */}\n                <div className=\"mb-4\">\n                    <label className=\"block text-gray-700 font-bold mb-2\">Username:</label>\n                    <input\n                        type=\"text\"\n                        className=\"w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-red-700\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)} // Update username state on input change\n                    />\n                </div>\n\n                {/* Password Input */}\n                <div className=\"mb-4\">\n                    <label className=\"block text-gray-700 font-bold mb-2\">Password:</label>\n                    <input\n                        type=\"password\"\n                        className=\"w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-red-700\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Update password state on input change\n                    />\n                </div>\n\n                {/* Login Button */}\n                <button\n                    type=\"button\"\n                    onClick={handleLogin} // Call handleLogin function on button click\n                    className=\"w-full bg-red-700 text-white py-2 rounded-md hover:bg-red-800 transition mt-4\"\n                >\n                    Login\n                </button>\n\n                {/* Create Account Button */}\n                <button\n                    type=\"button\"\n                    onClick={() => navigate('/register')} // Navigate to register page on button click\n                    className=\"w-full bg-gray-700 text-white py-2 rounded-md hover:bg-gray-800 transition mt-4\"\n                >\n                    Create Account\n                </button>\n            </form>\n        </div>\n    );\n};\n\n// Export Login component\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}