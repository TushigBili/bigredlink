{"ast":null,"code":"var _jsxFileName = \"/workspaces/bigredlink/BigRedLink/frontend/src/components/Register.js\",\n  _s = $RefreshSig$();\n// Import necessary modules and hooks\nimport React, { useState } from 'react'; // Import React and the useState hook for state management\n\n// Register Component\n// This component provides the user interface for registering a new user account.\n// It includes input fields for first name, last name, username, password, and balance.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  // Define state variable for registration form data\n  const [formData, setFormData] = useState({\n    firstName: '',\n    // State for the first name of the user\n    lastName: '',\n    // State for the last name of the user\n    username: '',\n    // State for the desired username\n    password: '',\n    // State for the password\n    balance: '' // State for the initial balance\n  });\n\n  // Function to handle input changes in the form fields\n  // Updates the state for each form field as the user types\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target; // Destructure the name and value from the input event\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    })); // Update the formData state\n  };\n\n  // Function to handle the registration action\n  // This function sends a POST request to the backend API to register the user\n  const handleRegister = async () => {\n    try {\n      // Send POST request to the register endpoint\n      const response = await fetch('/api/users/register', {\n        // Use the correct API endpoint\n        method: 'POST',\n        // Request type is POST\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Set request header\n        body: JSON.stringify({\n          first_name: formData.firstName,\n          // First name for the new user\n          last_name: formData.lastName,\n          // Last name for the new user\n          username: formData.username,\n          // Username for the new user\n          password: formData.password,\n          // Password for the new user\n          balance: parseFloat(formData.balance) || 0.00 // Initial balance, default to 0 if not set\n        })\n      });\n      const data = await response.json(); // Parse response to JSON format\n\n      // Check if registration failed or succeeded\n      if (data.error) {\n        alert('Registration failed: ' + data.error); // Show alert message if registration failed\n      } else {\n        alert('Registration successful. Redirecting to login page...'); // Show success message\n        window.location.href = '/'; // Redirect to login page after successful registration\n      }\n    } catch (error) {\n      console.error('Error:', error); // Log error to console if an error occurs\n      alert('An error occurred during registration.'); // Show alert message if an error occurred\n    }\n  };\n\n  // JSX code for rendering the registration form\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl mb-5 text-center\",\n      children: \"Register a New Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"bg-white p-6 rounded-lg shadow-lg w-80\",\n      children: [['firstName', 'lastName', 'username', 'password', 'balance'].map((field, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-gray-700 font-bold mb-2\",\n          children: field === 'balance' ? 'Initial Balance ($)' : field.charAt(0).toUpperCase() + field.slice(1) + ':'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: field === 'password' ? 'password' : 'text' // Determine input type based on field\n          ,\n          className: \"w-full px-3 py-2 border rounded\",\n          name: field // Use the field name as the name of the input\n          ,\n          value: formData[field] // Link input value to formData state\n          ,\n          onChange: handleInputChange // Update state when input changes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\" // Type is button to prevent default form submission\n        ,\n        onClick: handleRegister // Trigger registration function on click\n        ,\n        className: \"w-full bg-red-700 text-white py-2 rounded-md hover:bg-red-800 transition\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n// Export the Register component for use in other parts of the application\n_s(Register, \"SGr+7PWxfgT+v9y8gAyb1PjF+yY=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Register","_s","formData","setFormData","firstName","lastName","username","password","balance","handleInputChange","e","name","value","target","prevData","handleRegister","response","fetch","method","headers","body","JSON","stringify","first_name","last_name","parseFloat","data","json","error","alert","window","location","href","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","field","index","charAt","toUpperCase","slice","type","onChange","onClick","_c","$RefreshReg$"],"sources":["/workspaces/bigredlink/BigRedLink/frontend/src/components/Register.js"],"sourcesContent":["// Import necessary modules and hooks\nimport React, { useState } from 'react'; // Import React and the useState hook for state management\n\n// Register Component\n// This component provides the user interface for registering a new user account.\n// It includes input fields for first name, last name, username, password, and balance.\nconst Register = () => {\n    // Define state variable for registration form data\n    const [formData, setFormData] = useState({\n        firstName: '', // State for the first name of the user\n        lastName: '',  // State for the last name of the user\n        username: '',  // State for the desired username\n        password: '',  // State for the password\n        balance: ''    // State for the initial balance\n    });\n\n    // Function to handle input changes in the form fields\n    // Updates the state for each form field as the user types\n    const handleInputChange = (e) => {\n        const { name, value } = e.target; // Destructure the name and value from the input event\n        setFormData((prevData) => ({ ...prevData, [name]: value })); // Update the formData state\n    };\n\n    // Function to handle the registration action\n    // This function sends a POST request to the backend API to register the user\n    const handleRegister = async () => {\n        try {\n            // Send POST request to the register endpoint\n            const response = await fetch('/api/users/register', { // Use the correct API endpoint\n                method: 'POST', // Request type is POST\n                headers: { 'Content-Type': 'application/json' }, // Set request header\n                body: JSON.stringify({\n                    first_name: formData.firstName, // First name for the new user\n                    last_name: formData.lastName,   // Last name for the new user\n                    username: formData.username,    // Username for the new user\n                    password: formData.password,    // Password for the new user\n                    balance: parseFloat(formData.balance) || 0.00 // Initial balance, default to 0 if not set\n                })\n            });\n            const data = await response.json(); // Parse response to JSON format\n\n            // Check if registration failed or succeeded\n            if (data.error) {\n                alert('Registration failed: ' + data.error); // Show alert message if registration failed\n            } else {\n                alert('Registration successful. Redirecting to login page...'); // Show success message\n                window.location.href = '/'; // Redirect to login page after successful registration\n            }\n        } catch (error) {\n            console.error('Error:', error); // Log error to console if an error occurs\n            alert('An error occurred during registration.'); // Show alert message if an error occurred\n        }\n    };\n\n    // JSX code for rendering the registration form\n    return (\n        <div className=\"flex flex-col items-center justify-center h-screen\">\n            <h2 className=\"text-3xl mb-5 text-center\">Register a New Account</h2>\n            <form className=\"bg-white p-6 rounded-lg shadow-lg w-80\">\n                {/* Map through each field name for registration */}\n                {['firstName', 'lastName', 'username', 'password', 'balance'].map((field, index) => (\n                    <div className=\"mb-4\" key={index}>\n                        <label className=\"block text-gray-700 font-bold mb-2\">\n                            {field === 'balance' ? 'Initial Balance ($)' : field.charAt(0).toUpperCase() + field.slice(1) + ':'}\n                        </label>\n                        <input\n                            type={field === 'password' ? 'password' : 'text'} // Determine input type based on field\n                            className=\"w-full px-3 py-2 border rounded\"\n                            name={field} // Use the field name as the name of the input\n                            value={formData[field]} // Link input value to formData state\n                            onChange={handleInputChange} // Update state when input changes\n                        />\n                    </div>\n                ))}\n                {/* Registration Button */}\n                <button\n                    type=\"button\" // Type is button to prevent default form submission\n                    onClick={handleRegister} // Trigger registration function on click\n                    className=\"w-full bg-red-700 text-white py-2 rounded-md hover:bg-red-800 transition\"\n                >\n                    Register\n                </button>\n            </form>\n        </div>\n    );\n};\n\n// Export the Register component for use in other parts of the application\nexport default Register;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}